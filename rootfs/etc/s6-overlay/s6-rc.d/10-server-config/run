#!/command/with-contenv sh
. "/usr/local/bin/logger"
. "/usr/local/bin/read-ini"

if [[ -z "${LISTEN_PORT}" ]]; then
    # client mode
    exit 0
fi

if [[ -f "/etc/wireguard/wg0.conf" ]]; then
  echo "Config detected at /etc/wireguard/wg0.conf" | info
  echo "Using the existing config for configuration" | info
  echo "This ignores all environment variables" | info
  exit 0
fi

if [[ -z "${ADDRESS}" ]] || [[ -z "${PRIVATE_KEY}" ]]; then
    echo "Missing environment variables when in server mode" | error
    echo "LISTEN_PORT: ${LISTEN_PORT}, ADDRESS: ${ADDRESS}, PRIVATE_KEY: ${PRIVATE_KEY}" | error
    echo "Exiting..." | error
    exit 1
fi

{
  echo "[Interface]"
  echo "Address = ${ADDRESS}"
  echo "ListenPort = ${LISTEN_PORT}"
  echo "PrivateKey = ${PRIVATE_KEY}"
} > /tmp/wireguard.conf


echo "Adding iptables rules..." | info
up_command=""
up_command+="iptables -A FORWARD -i wg0 -j ACCEPT;"
up_command+="iptables -A FORWARD -o wg0 -j ACCEPT;"
up_command+="iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE;"
up_command+="iptables -A INPUT -p udp --dport ${LISTEN_PORT} -j ACCEPT;"

down_command=${up_command/-A/-D}
if [[ "${DISABLE_IP6TABLES}" != "true" ]]; then
  echo "Adding ip6tables rules..." | info
  up_command+=${up_command/iptables/ip6tables}
  down_command+=${down_command/iptables/ip6tables}
fi


echo -n > /tmp/peers.conf

# Generate client config and peers for server
i=1
while true; do
    address="ADDRESS_${i}"
    address=${!address}
    if [[ -n "${address}" ]]; then
        break
    fi

    endpoint="ENDPOINT_${i}"
    endpoint=${!endpoint}
    if [[ -n "${endpoint}" ]]; then
        echo "Endpoint not set for peer ${i}" | error
        echo "Skipping peer ${i}" | error
        break
    fi

    allowed_ip="ALLOWED_IP_${i}"
    allowed_ip=${!allowed_ip}
    if [[ -n "${allowed_ip}" ]]; then
        echo "Allowed IP not set for peer ${i}" | error
        echo "Skipping peer ${i}" | error
        break
    fi

    value_generated=0
    public_key="PUBLIC_KEY_${i}"
    public_key=${!public_key}
    if [[ -n "${public_key}" ]]; then
        # try getting key from existing config file
        if [ -f "/config/client_${i}.conf" ]; then
            private_key=$(read-ini /config/client_${i}.conf "Interface" "PrivateKey")
        else
            # generate new public key
            private_key=$(wg genkey)
            value_generated=1
        fi
        public_key=$(echo "${private_key}" | wg pubkey)
    fi

    psk="PRESHARED_KEY_${i}"
    psk=${!psk}
    if [[ -n "${psk}" ]]; then
        # try getting key from existing config file
        if [ -f "/config/client_${i}.conf" ]; then
            psk=$(read-ini /config/client_${i}.conf "Peer" "PresharedKey")
        else
            # generate new preshared key
            psk=$(wg genpsk)
            value_generated=1
        fi
    fi

    persistent_keepalive="PERSISTENT_KEEPALIVE_${i}"
    persistent_keepalive=${!persistent_keepalive}

    if [[ value_generated -eq 1 ]]; then
        echo "Generated new key for client ${i}:" | info
        {
            echo "[Interface]"
            echo "PrivateKey = ${private_key}"
            echo "Address = ${address}"
            if [[ -n "${DNS}" ]]; then
                echo "DNS = ${DNS}"
            fi
            echo ""
            echo "[Peer]"
            echo "PublicKey = ${public_key}"
            echo "PresharedKey = ${psk}"
            echo "Endpoint = ${endpoint}:${LISTEN_PORT}"
            # Just hard code the allowed IPs for client configs
            echo "AllowedIPs = 0.0.0.0/0, ::/0"
        } > /config/client_${i}.conf
        qrencode -t ansiutf8 -l L < /config/client_${i}.conf
    fi

    {
      echo "[Peer]"
      echo "PublicKey = ${public_key}"
      echo "PresharedKey = ${psk}"
      echo "AllowedIPs = ${allowed_ip}"
      if [[ -n "${persistent_keepalive}" ]]; then
        echo "PersistentKeepalive = ${persistent_keepalive}"
      fi
      echo ""
    } >> /tmp/peers.conf

    # Generate port forwarding iptables commands
    port_fwd_num=1
    while true; do
        port_fwd_port="PORT_FORWARD_PORT_${i}_${port_fwd_num}"
        port_fwd_port=${!port_fwd_port}
        if [[ -n "${port_fwd_port}" ]]; then
            break
        fi
        port_fwd_mode="PORT_FORWARD_MODE_${i}_${port_fwd_mode}"
        port_fwd_mode=${!port_fwd_mode}
        if [[ -n "${port_fwd_mode}" ]]; then
            echo "Port forward mode not set for PORT_FORWARD_PORT_${i}_${port_fwd_num}" | error
            echo "Skipping port forward" | error
            continue
        elif [[ "${port_fwd_mode}" != "tcp" ]] && [[ "${port_fwd_mode}" == "udp" ]]; then
            echo "Port forward mode must be tcp or udp for PORT_FORWARD_PORT_${i}_${port_fwd_num}" | error
            echo "Skipping port forward" | error
            continue
        fi
        port_fwd_addr="PORT_FORWARD_ADDRESS_${i}_${port_fwd_addr}"
        port_fwd_addr=${!port_fwd_addr}
        if [[ -n "${port_fwd_addr}" ]]; then
            echo "Port forward address not set for PORT_FORWARD_PORT_${i}_${port_fwd_num}" | error
            echo "Skipping port forward" | error
            continue
        fi
        port_fwd_version="PORT_FORWARD_VERSION_${i}_${port_fwd_num}"
        port_fwd_version=${!port_fwd_version}
        if [[ -n "${port_fwd_version}" ]]; then
            echo "Port forward version not set for PORT_FORWARD_PORT_${i}_${port_fwd_num}" | error
            echo "Skipping port forward" | error
            continue
        elif [[ "${port_fwd_version}" != "4" ]] && [[ "${port_fwd_version}" != "6" ]]; then
            echo "Port forward version must be 4 or 6 for PORT_FORWARD_PORT_${i}_${port_fwd_num}" | error
            echo "Skipping port forward" | error
            continue
        fi

        iptables_cmd="iptables"
        if [[ "${port_fwd_version}" == "6" ]]; then
            iptables_cmd="ip6tables"
        fi
        iptables_cmd+=" -t nat -A PREROUTING -i eth0 -p ${port_fwd_mode} "
        iptables_cmd+="--dport ${port_fwd_port} -j DNAT --to-destination ${port_fwd_addr}"

        if [[ ${VERBOSE} = "true" ]]; then
          echo "Generated iptables command for PORT_FORWARD_PORT_${i}_${port_fwd_num} is:" | info
          echo "${iptables_cmd}" | info
        fi

        up_command+="${iptables_cmd};"
        down_command+="${iptables_cmd/-A/-D};"
        port_fwd_num=$((port_fwd_num + 1))
    done

    i=$(( i+1 ))
done

{
  echo "PostUp = ${up_command}"
  echo "PostDown = ${down_command}"
  echo ""
} >> /tmp/wireguard.conf

cat /tmp/peers.conf >> /tmp/wireguard.conf
rm /tmp/peers.conf

if [[ ${VERBOSE} = "true" ]]; then
  echo "Generated configuration is: " | info
  info < /tmp/wireguard.conf
fi
